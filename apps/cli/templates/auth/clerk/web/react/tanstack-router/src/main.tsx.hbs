import { StrictMode } from "react";
import ReactDOM from "react-dom/client";
import { RouterProvider, createRouter } from "@tanstack/react-router";
import { ClerkProvider } from "@clerk/clerk-react";
import { dark } from "@clerk/themes";
import { routeTree } from "./routeTree.gen";
{{#if (eq api "trpc")}}
import { trpcClient, trpcQueryClient } from "./lib/api-client";
import { QueryClientProvider } from "@tanstack/react-query";
{{/if}}
{{#if (eq api "orpc")}}
import { queryClient } from "./lib/api-client";
import { QueryClientProvider } from "@tanstack/react-query";
{{/if}}

const clerkPublishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!clerkPublishableKey) {
  throw new Error("Missing Clerk Publishable Key");
}

const router = createRouter({ routeTree });

declare module "@tanstack/react-router" {
  interface Register {
    router: typeof router;
  }
}

const rootElement = document.getElementById("root")!;
if (!rootElement.innerHTML) {
  const root = ReactDOM.createRoot(rootElement);
  root.render(
    <StrictMode>
      <ClerkProvider 
        publishableKey={clerkPublishableKey}
        appearance={{
          baseTheme: dark,
        }}
      >
        {{#if (eq api "trpc")}}
        <trpcClient.Provider client={trpcClient} queryClient={trpcQueryClient}>
          <QueryClientProvider client={trpcQueryClient}>
            <RouterProvider router={router} />
          </QueryClientProvider>
        </trpcClient.Provider>
        {{else if (eq api "orpc")}}
        <QueryClientProvider client={queryClient}>
          <RouterProvider router={router} />
        </QueryClientProvider>
        {{else}}
        <RouterProvider router={router} />
        {{/if}}
      </ClerkProvider>
    </StrictMode>,
  );
}