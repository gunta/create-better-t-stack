model Customer {
  id              String           @id @default(uuid())
  userId          String           @unique
  stripeCustomerId String?         @unique @map("stripe_customer_id")
  email           String
  name            String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  
  subscriptions   Subscription[]
  invoices        Invoice[]
  paymentIntents  PaymentIntent[]

  @@map("customers")
}

model Product {
  id              String   @id @default(uuid())
  stripeProductId String?  @unique @map("stripe_product_id")
  name            String
  description     String?  @db.Text
  features        Json     @default("[]")
  active          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  prices          Price[]

  @@map("products")
}

model Price {
  id            String   @id @default(uuid())
  productId     String   @map("product_id")
  stripePriceId String?  @unique @map("stripe_price_id")
  unitAmount    Int      @map("unit_amount")
  currency      String   @default("usd")
  type          String   @default("one_time") // one_time or recurring
  interval      String?  // month, year, week, day
  intervalCount Int?     @map("interval_count")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  product       Product  @relation(fields: [productId], references: [id])
  subscriptions Subscription[]

  @@map("prices")
}

model Subscription {
  id                   String    @id @default(uuid())
  customerId           String    @map("customer_id")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id")
  status               String    // active, canceled, incomplete, incomplete_expired, trialing, past_due, unpaid
  priceId              String?   @map("price_id")
  quantity             Int       @default(1)
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")
  currentPeriodStart   DateTime? @map("current_period_start")
  currentPeriodEnd     DateTime? @map("current_period_end")
  endedAt              DateTime? @map("ended_at")
  cancelAt             DateTime? @map("cancel_at")
  canceledAt           DateTime? @map("canceled_at")
  trialStart           DateTime? @map("trial_start")
  trialEnd             DateTime? @map("trial_end")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  customer             Customer  @relation(fields: [customerId], references: [id])
  price                Price?    @relation(fields: [priceId], references: [id])
  invoices             Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id               String    @id @default(uuid())
  customerId       String    @map("customer_id")
  subscriptionId   String?   @map("subscription_id")
  stripeInvoiceId  String?   @unique @map("stripe_invoice_id")
  number           String?
  amountPaid       Int       @map("amount_paid")
  amountDue        Int       @map("amount_due")
  currency         String
  status           String    // draft, open, paid, uncollectible, void
  hostedInvoiceUrl String?   @map("hosted_invoice_url") @db.Text
  pdfUrl           String?   @map("pdf_url") @db.Text
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  customer         Customer      @relation(fields: [customerId], references: [id])
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

model PaymentIntent {
  id                    String   @id @default(uuid())
  customerId            String   @map("customer_id")
  stripePaymentIntentId String?  @unique @map("stripe_payment_intent_id")
  amount                Int
  currency              String
  status                String   // succeeded, processing, requires_payment_method, requires_confirmation, requires_action, canceled, requires_capture
  description           String?  @db.Text
  metadata              Json?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  customer              Customer @relation(fields: [customerId], references: [id])

  @@map("payment_intents")
}