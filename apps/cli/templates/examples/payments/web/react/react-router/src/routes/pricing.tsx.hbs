import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Check, Loader2 } from "lucide-react";
{{#if (eq api "orpc")}}
import { orpc } from "@/utils/orpc";
{{/if}}
{{#if (eq api "trpc")}}
import { trpc } from "@/utils/trpc";
{{/if}}
import { useMutation, useQuery } from "@tanstack/react-query";

export default function PricingPage() {
  {{#if (eq api "orpc")}}
  const products = useQuery(orpc.payments.getProducts.queryOptions());
  const checkoutMutation = useMutation(
    orpc.payments.createCheckoutSession.mutationOptions({
      onSuccess: (data) => {
        // Redirect to Stripe Checkout
        if (data.url) {
          window.location.href = data.url;
        }
      },
    })
  );
  {{/if}}
  {{#if (eq api "trpc")}}
  const products = useQuery(trpc.payments.getProducts.queryOptions());
  const checkoutMutation = useMutation(
    trpc.payments.createCheckoutSession.mutationOptions({
      onSuccess: (data) => {
        // Redirect to Stripe Checkout
        if (data.url) {
          window.location.href = data.url;
        }
      },
    })
  );
  {{/if}}

  const handleCheckout = (priceId: string, mode: "payment" | "subscription") => {
    const origin = window.location.origin;
    checkoutMutation.mutate({
      priceId,
      mode,
      successUrl: `${origin}/payment-success`,
      cancelUrl: `${origin}/pricing`,
    });
  };

  if (products.isLoading) {
    return (
      <div className="flex h-[60vh] items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="mx-auto max-w-7xl px-4 py-16">
      <div className="text-center">
        <h1 className="text-4xl font-bold tracking-tight">Choose Your Plan</h1>
        <p className="mt-4 text-lg text-muted-foreground">
          Select the perfect plan for your needs
        </p>
      </div>

      <div className="mt-16 grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {products.data?.map((product) => (
          <Card key={product.id} className="relative overflow-hidden">
            <CardHeader>
              <CardTitle>{product.name}</CardTitle>
              <CardDescription>{product.description}</CardDescription>
            </CardHeader>
            <CardContent>
              {/* Display prices */}
              {product.prices.map((price) => (
                <div key={price.id} className="mb-6">
                  <div className="flex items-baseline">
                    <span className="text-3xl font-bold">
                      ${(price.unitAmount / 100).toFixed(2)}
                    </span>
                    {price.type === "recurring" && (
                      <span className="ml-1 text-muted-foreground">
                        /{price.interval}
                      </span>
                    )}
                  </div>
                  
                  {/* Features list */}
                  {product.features && (
                    <ul className="mt-6 space-y-3">
                      {(product.features as string[]).map((feature, index) => (
                        <li key={index} className="flex items-start">
                          <Check className="mr-2 h-4 w-4 mt-0.5 flex-shrink-0 text-primary" />
                          <span className="text-sm">{feature}</span>
                        </li>
                      ))}
                    </ul>
                  )}

                  <Button
                    className="mt-8 w-full"
                    onClick={() => handleCheckout(price.id, price.type as "payment" | "subscription")}
                    disabled={checkoutMutation.isPending}
                  >
                    {checkoutMutation.isPending ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : price.type === "recurring" ? (
                      "Subscribe"
                    ) : (
                      "Purchase"
                    )}
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}